QUESTION : https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 // Optimal Approach

 // T(n) = O(n)
 // S(n) = O(n)

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // Create a queue to perform level-order traversal
        Queue<TreeNode> q = new LinkedList<>();
        // Create a list to store the result
        List<List<Integer>> result = new LinkedList<>();
        
        // If the root is null, return an empty result
        if(root == null) return result;
        
        // Add the root to the queue to start traversal
        q.add(root);
        
        // Continue traversal until the queue is empty
        while(!q.isEmpty()) {
            // Get the current size of the queue, which represents the number of nodes in the current level
            int queueSize = q.size();
            // Create a list to store values of nodes at the current level
            List<Integer> list = new LinkedList<>();
            // Iterate through all nodes at the current level
            for(int i = 0; i < queueSize; i++) {
                // Remove a node from the front of the queue
                TreeNode x = q.remove();
                // Add the value of the removed node to the list
                list.add(x.val);
                // If the removed node has a left child, add it to the queue
                if(x.left!=null) q.add(x.left);
                // If the removed node has a right child, add it to the queue
                if(x.right!=null) q.add(x.right);
            }
            // Add the list of values of nodes at the current level to the result
            result.add(list);
        }
        // Return the final result
        return result;
    }
}
