QUESTION - https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1/
What is Comparator ? : https://www.youtube.com/watch?v=ZA2oNhtNk3w

/*
    Optimal Approach
    T(n) = O(nlogn)
    S(n) = O(n)  
*/

class Solution {

    // Class to represent a meeting with start and end times.
    static class Meeting {
        int start;
        int end;

        Meeting(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }

    // Comparator class to compare meetings based on their end times.
    static class MeetingComparator implements Comparator<Meeting> {

        @Override
        public int compare(Meeting o1, Meeting o2) {
            // Compare meetings based on end times in ascending order.
            if (o1.end < o2.end) 
                return -1; // don't swap
            return 1; // swap
        }
    }

    // Function to find the maximum number of meetings that can be performed.
    public static int maxMeetings(int start[], int end[], int n) {
        // Create a list of meetings using the Meeting class.
        ArrayList<Meeting> list = new ArrayList<>();
        
        // Create a new Meeting object and add it to the list.
        for (int i = 0; i < start.length; i++) {
            list.add(new Meeting(start[i], end[i]));
        }

        // Create an instance of the MeetingComparator class.
        MeetingComparator com = new MeetingComparator();

        // Sort the list of meetings using the MeetingComparator.
        Collections.sort(list, com);

        // count=1 ensures always selecting 1st pair 
        int count = 1;
        // store endtime of first pair to compare it with start timeof next pair
        int endTime = list.get(0).end; 

        // Iterate through the sorted list to find non-overlapping meetings.
        // start from second pair
        for (int i = 1; i < n; i++) {
            // endTime is the endtime of previously "SELECTED MEETINGS"
            if (list.get(i).start > endTime) { 
                count++;
                // update endTime
                endTime = list.get(i).end;
            }
        }

        return count;
    }
}