QUESTION : https://leetcode.com/problems/combination-sum/

/*
    Time Complexity :

    T(n) = O(2^target)(i.e pick or not pick) * O(k) (to add the element to datastructure)
    S(n) = O(k) * O(x) (total combination)
*/

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        fun(candidates, target, 0, new ArrayList<>(), res);
        return res;
    }
    
    void fun(int[] candidates, int target, int start, List<Integer> combination, List<List<Integer>> res) {
        if(target == 0) {
            res.add(new ArrayList<>(combination));
            return;
        }
        for(int i = start; i < candidates.length; i++) {
            // check the element at current index which we are repeateadly adding is <= target
            // when its became >, then remove the last added value move forward and do the same 
            if(candidates[i] <= target) {
                combination.add(candidates[i]);
                fun(candidates, target - candidates[i], i, combination, res);
                combination.remove(combination.size() - 1);
            }
        }
    }
}