QUESTION : https://leetcode.com/problems/middle-of-the-linked-list/

/*  
    Another Approach

    T(n) = O(n) + O(n/2)
    S(n) = O(1)

    public ListNode middleNode(ListNode head) {
        ListNode temp = head;
        int count = 0;
        // count total number of node
        while(temp != null) {
            temp = temp.next;
            count++;
        }
        temp = head;
        int mid = (count/2);
        // traverse upto mid
        while(mid > 0) {
            temp = temp.next;
            mid--;
        }

        return temp;
    }
*/


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // T(n) = o(n/2)
    // S(n) = O(1)
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}