QUESTION: https://leetcode.com/problems/merge-two-sorted-lists/

/*
    USING EXTERNAL SPACE
    T(n) = O(n)
    S(n) = O(n)

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while(list1 != null && list2 != null) {
            if(list2.val <= list1.val) {
                current.next = list2;
                list2 = list2.next;
            }
            else {
                current.next = list1;
                list1 = list1.next;
            }
            current = current.next;
        }

        if(list1 != null) {
            current.next = list1;
        }

        if(list2 != null) {
            current.next = list2;
        }

        return dummy.next;
    }
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    /*
        INPLACE - OPTIMAL SOLUTION

        T(n) = O(n)
        S(n) = O(1)
    */
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null) return list2;
        if(list2==null) return list1;

        // point smaller node to res
        ListNode res = list2.val <= list1.val ? list2 : list1; 
        ListNode temp = null;

        // we are assuming that smaller list is list2, if not we are changing smaller list to list2
        while(list1 != null && list2 != null) {
            // first node of list2 is smaller
            if(list2.val <= list1.val) {
                while(list2 != null && list2.val <= list1.val) {
                    temp = list2;
                    list2 = list2.next;
                }
                temp.next = list1;
            }
            // if first node of list2 is not smaller, swap list2 and list1
            else {
                ListNode swap = list2;
                list2 = list1;
                list1 = swap;
            }
        }

        return res;
    }
}