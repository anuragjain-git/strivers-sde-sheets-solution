QUESTION - https://www.geeksforgeeks.org/problems/flattening-a-linked-list

/*
    BruteForce (ArrayList)
    T(n) = O(n) + O(nlogn) + O(n)
    S(n) = O(n)

    Code -
    
        class GfG
        {
            Node flatten(Node root)
            {
        	    Node prev = root;
        	    Node nextNode = prev.next;
        	    
                ArrayList<Integer> arr = new ArrayList<>();
                
                while(prev != null) {
                    Node temp = prev;
                    while(temp != null) {
                        arr.add(temp.data);
                        temp = temp.bottom;
                    }
                    prev = nextNode;
                    if(nextNode != null) {
                        nextNode = nextNode.next;
                    }
                }
                Collections.sort(arr);
                Node verticalHead = verticalList(arr);
                
                return verticalHead;
            }
            
            private Node verticalList(ArrayList<Integer> arr) {
                Node current = null;
                Node head = null;
                for (int value : arr) {
                    
                    Node newNode = new Node(value);
                    
                    if(head == null) {
                        head = newNode;
                        current = head;
                    }
                    else {
                        current.bottom = newNode;
                        current = current.bottom;
                    }
                }
                
                return head;
            }
        }
    
*/


/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
    
    
/*
    Optimal -
    
    T(n) = O(n)
    S(n) = O(1)
    
*/
class GfG
{
    Node flatten(Node root)
    {
	    
	    if(root == null || root.next== null) return root;

	    root.next = flatten(root.next);
        root = merge(root, root.next);
        
        return root;
        
    }
    
    private Node merge(Node l1, Node l2) {
        
        Node temp = new Node(0);
        Node res = temp;
        
        while(l1 != null && l2 != null) {
            if(l1.data < l2.data) {
                temp.bottom = l1;
                temp = temp.bottom;
                l1 = l1.bottom;
            }
            else {
                temp.bottom = l2;
                temp = temp.bottom;
                l2 = l2.bottom;
            }
        }
        if(l1 != null) temp.bottom = l1; 
        else temp.bottom = l2;
        
        return res.bottom; 
    }
}
