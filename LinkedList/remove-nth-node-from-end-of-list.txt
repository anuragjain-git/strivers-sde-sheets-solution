QUESTION: https://leetcode.com/problems/remove-nth-node-from-end-of-list/

/*  
    Another approach

    T(n) = O(2n)
    S(n) = O(1)
    
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp = head;
        int count = 0;
        while(temp != null) {
            temp = temp.next;
            count++;
        }
        int jumpToPosition = count - n;
        
        if(jumpToPosition == 0) return null;
        
        temp = head;
        while(jumpToPosition > 1 && temp.next != null) {
            temp = temp.next;
            jumpToPosition--;
        }
        //ListNode rem = temp.next;
        temp.next = temp.next.next;
        return head;
    }
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    
    // T(n) = O(n)
    // S(n) = O(1)
 
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode slow = head;
        ListNode fast = head;

        // Move fast pointer n steps ahead
        for (int i = 0; i < n; i++) {
            fast = fast.next;
        }

        // If fast is null, it means we need to remove the head
        if (fast == null) return head.next;

        // Move both pointers until fast reaches the end
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }

        // Remove the nth node from the end
        slow.next = slow.next.next;

        return head;
    }
}