QUESTION : https://leetcode.com/problems/linked-list-cycle/

# Using HasphMap
1. Add all the node(add node not value of the node) to the hashmap.
2. If pointer moved to same node again return true.(loop exist)

# Complexity
- Time complexity: O(n)
- Space complexity:O(n)

# Code
```
public boolean hasCycle(ListNode head) {
        HashMap<ListNode, Integer> map = new HashMap<>();
        ListNode temp = head;
        while(temp!=null && temp.next!=null) {
            if(map.containsKey(temp)) return true;
            else map.put(temp, 1);
            temp = temp.next;
        }
        return false;
    }
```
# Using slow and fast pointer approach
    1. Two Pointer slow and fast.
    2. slow moves one step, fast moves two step.
    3. while moving in the loop if both points to same node the loop exist
    (distance between the two pointer keeps decreasing by 1 at each iteration)

# Complexity
- Time complexity:O(n)
- Space complexity:O(1)

# code 
```
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) return true; 
        }
        return false; // if no loop found
    }
}
```
