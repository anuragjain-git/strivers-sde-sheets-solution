QUESTION : https://leetcode.com/problems/intersection-of-two-linked-lists/

/*
    BRUTE SOULTION-
    T(n) = O(n1 + n2)
    S(n) = O(n1)

    CODE -

    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        // store the current node to the hashmap(not the value)
        HashMap<ListNode,Integer> map = new HashMap<>();

        ListNode temp = headA;

        // add all the element of headA linkedlist to the hashmap
        while(temp != null) {
            map.put(temp, 1);
            temp = temp.next;
        }

        temp = headB;

        // if the hashmap already contain that node (not value) return the value of that node
        // else do nothing
        while(temp != null) {
            if(map.containsKey(temp)) return temp;
            temp = temp.next;
        } 
        // if no intersection return null
        return null;
    }
*/


/* BETTER SOLUTION - 
    T(n) = O(n1 + n2 + (n1 or n2 who have greater length i.e move + last while loop))
    S(n) = O(1)
        
    CODE -
    
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {

        ListNode temp1 = headA;
        ListNode temp2 = headB;
        int count1 = 0;
        int count2 = 0;

        // count total number of element in headA
        while(temp1 != null) {
            count1++;
            temp1 = temp1.next;
        }

        // count total number of element in headB
        while(temp2 != null) {
            count2++;
            temp2 = temp2.next;
        }

        temp1 = headA;
        temp2 = headB;

        if(count1 > count2) { // if headA have more number of element move headA
            int move = count1 - count2;
            while(move > 0) {
                temp1 = temp1.next;
                move--;
            }
        }
        else { // else headB have more number of element move headB
            int move = count2 - count1;
            while(move > 0) {
                temp2 = temp2.next;
                move--;
            }
        }
        
        // now bith temp1 and temp2 have same number of element from where ther are pointing
        while(temp1 != null) { // can also take temp2
            if(temp1 == temp2) return temp1; // if intersection found
            temp1 = temp1.next;
            temp2 = temp2.next;
        } 
        // if no intersection return null
        return null;
    }

*/

/*
    OPTIMAL SOLUTION -
    T(n) = O(n1 + n2)
    S(n) = O(1)
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {

        ListNode temp1 = headA;
        ListNode temp2 = headB;

        while(temp1 != temp2) {
            // If temp1 reaches the end, move it to the head of the other list
            temp1 = (temp1 == null) ? headB : temp1.next;

            // If temp2 reaches the end, move it to the head of the other list
            temp2 = (temp2 == null) ? headA : temp2.next;
        }
        return temp1; // temp1 and temp2 are either at intersection or at null
    }
}