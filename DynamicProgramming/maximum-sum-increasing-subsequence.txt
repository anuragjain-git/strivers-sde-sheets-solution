QUESTION - https://www.geeksforgeeks.org/problems/maximum-sum-increasing-subsequence4749/1

/*
    DP, Memorization
    T(n) = O(2^n) + O(n*n)
    S(n) = O(n*n)

class Solution
{
	public int maxSumIS(int arr[], int n)  
	{  
	   int index = 0;
        int prevIndex = -1;
        int dp[][] = new int[arr.length][arr.length];
        // mark as not calculated 
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return fun(index, prevIndex, arr, dp);
	}
	public int fun(int index, int prevIndex, int arr[], int dp[][]) {
	    // base case
	    if(index == arr.length) return 0;
	    
        // check if result for current state is already calculated
        if(dp[index][prevIndex + 1] != -1) return dp[index][prevIndex + 1];
        
        // not take the element at current index
        int notTake = fun(index + 1, prevIndex, arr, dp);
        
        int take = 0;
        // take the element at current index if nums[index] > nums[prevIndex]:
        // -1 checks if the current element is the first element
        if(prevIndex == -1 || arr[index] > arr[prevIndex]) {
            take = arr[index] + fun(index + 1, index, arr, dp);
        }
        
        dp[index][prevIndex + 1] = Math.max(take, notTake);
        
        return dp[index][prevIndex + 1];
	}
}
*/



    // Dp, Space Optimization
    // T(n) = O(n^2)
    // S(n) = o(n)
class Solution {
    
    public int maxSumIS(int arr[], int n) {
        int dp[] = new int[n];
        
        for(int i = 0; i < n; i++) dp[i] = arr[i];
        
        // initialize maxSum with first element
        int maxSum = dp[0];
        
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                // 1st condition : checks if current value is greater then previous
                // 2nd condition : checks if updating the maximum sum at index i with the sum of the previous maximum sum at index j and 
                // the current element arr[i] would result in a larger sum
                // example 9 4 5 8, after some iteration 
                // dp = 9, 4, 4+5, 8 ::: arr = 9, 4, 5, 8
                // now from arr 8 > 4 so dp = 9, 4, 9, 4+8 ::: arr = 9, 4, 5, 8
                // dp = 9, 4, 9, 12 ::: arr = 9, 4, 5, 8
                // now from arr 8 > 5, check:- dp:12 < dp:9 + arr:8 
                // i.e [sum of last consecutive < sum of previous consecutive(without including curr element) + current element]
                if(arr[i] > arr[j] && dp[i] < dp[j] + arr[i]) {
                    dp[i] = dp[j] + arr[i];
                }
            }
            maxSum = Math.max(maxSum, dp[i]);
        }
        
        return maxSum;
    }
}