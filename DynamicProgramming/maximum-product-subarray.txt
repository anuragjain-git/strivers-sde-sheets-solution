QUESTION : https://leetcode.com/problems/maximum-product-subarray/

// you can use bruteforce using three for loop and can use better approach by doing in two loop

/*
    OPTIMAL APPROACH:

    T(n) = O(n)
    S(n) = O(1)  
*/

class Solution {
    public int maxProduct(int[] nums) {
        int prefix = 1;
        int suffix = 1;
        int ans = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++) {
            if(prefix == 0) prefix = 1;
            if(suffix == 0) suffix = 1;

            prefix = prefix * nums[i];
            suffix = suffix * nums[nums.length - i - 1];
            ans = Math.max(ans, Math.max(prefix, suffix));
        }
        return ans;
    }
}
