QUESTION : https://www.geeksforgeeks.org/problems/k-th-element-of-two-sorted-array1317/1

/*
    Bruteforce Approach:
    
    Time Complexity : O(k)
    Space Complexity : O(1)

class Solution {
    public long kthElement(int arr1[], int arr2[], int n, int m, int k) {
        int i = 0, j = 0;

        while (k > 0) {
            int a = (i < n) ? arr1[i] : Integer.MAX_VALUE;
            int b = (j < m) ? arr2[j] : Integer.MAX_VALUE;

            if (a < b) {
                if (--k == 0) return a;
                i++;
            } else {
                if (--k == 0) return b;
                j++;
            }
        }

        return -1;
    }
}

*/

// Divide and Conquer Approach (will be added...)

/*
    Optimal Approach : Binary Search (better explaination : https://www.youtube.com/watch?v=nv7F4PiLUzo)
    
    Time Complexity : O(log(Math.min(n, m)))
    Space Complexity : O(1)
*/

class Solution {
    public long kthElement(int arr1[], int arr2[], int n, int m, int k) {
        
        if(n > m) return kthElement(arr2, arr1, m, n, k);
        
        int left = k; // length of left half
        /*
            to keep k number of element in the left half,
            from arr1 we should have atleast low number of element and max high number of element
    
            consider n = 4, m = 6
            k = 3, low should be 0, high should be 3
            k = 7, low should be 1, high should be 4
        */
        // Apply binary search
        int low = Math.max(0, k - m), high = Math.min(k, n);
        while(low <= high) {
            // from 0th index to mid1 index of arr1 will be part of left half
            int mid1 = (low + high) / 2;
            /* as total element in left half can be 'left' number of element, 
            so remaining left - mid1 element of arr2 will also be in left half
            */
            int mid2 = left - mid1;
            /* 
            Now check if all the element in left half is smaller then elements in right half

                form mid1 to n1 index element will be in right half and
                form mid2 to n2 index element will be in right half
                mid1 - 1 will obviously be smaller then mid1 element and
                mid2 - 1 will obviously be smaller then mid2 element, as array is sorted
                so check,
                mid2 - 1(l2) > mid1(r1),
                    - elements of arr2 from left half is larger then elements of arr1 in right half
                    - move small element inside of left half and greater element inside of right half
                    - low will be mid1 + 1 (till mid1 all element is smaller and should be in left half)
                mid1 - 1(l1) > mid2(r2)
                    - elements of arr1 from left half is larger then elements of arr2 in right half
                    - move large element from left half to right half and smaller element from right half to left half
                    - hight will be mid1 - 1 (from mid1 - 1(l1) all element is larger and should be in right half)
            
            */
            /*  mid1 will me in right half and from 0th index to mid1 - 1 will be in left half,
                but if mid1 is 0 left half won't have any element then assign minimum value to
                make above condition valid.
                (similarly for mid2)
            */
            int l1 = (mid1 > 0) ? arr1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? arr2[mid2 - 1] : Integer.MIN_VALUE;
            /*  As mid1 will be on right half then mid1 should be less then n1, 
                if mid1 == n1 means all elements of nums1 are in left half. 
                Similarly, if mid2 == n1 means all element of arr2 are in left half and right half is empty 
                i.e we assign it as MAX value for above condition to be valid 
            */
            int r1 = (mid1 < n) ? arr1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < m) ? arr2[mid2] : Integer.MAX_VALUE;
            
            // now there are k number of element in left half kth element will be the largest element in left half
            if(l1 <= r2 && l2 <= r1) return Math.max(l1, l2);
            else if(l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        // Dummy return statement
        return -1;
    }
}

/*
rough work

lo|mid,hi
  1|2,3
4,5|6


1,2|3
  4|5,6

1,2,3|
     |4,5,6

*/