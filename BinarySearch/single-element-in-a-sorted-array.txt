QUESTION : https://leetcode.com/problems/single-element-in-a-sorted-array/

/*
    BruteForce Approach 1 -
    Time Complexity - O(N)
    Space Complexity - O(1)

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;

        if(n == 1) return nums[0];

        for(int i = 0; i < n; i++) {
            // for first element
            if(i == 0) {
                if(nums[i] != nums[i + 1]) return nums[i];
            }
            // for last element
            else if(i == n - 1) {
                if(nums[i] != nums[i - 1]) return nums[i];
            }
            // for middle elements
            else {
                if(nums[i] != nums[i + 1] && nums[i] != nums[i - 1]) return nums[i];
            }
        }
        return -1;
    }
}
*/

/*
    BruteForce Approach 2 -
    Time Complexity - O(N)
    Space Complexity - O(1)

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int ans = 0;
        // xor all the number
        for(int i = 0; i < nums.length; i++) ans = ans ^ nums[i];
        return ans;
    }
}
*/

/*
    Optimal Approach -
    - number in even, odd index are same until they reach a unique number after that 
      number in odd, even index are same.
    - We will consider both these part as left and right subpart.

    Time Complexity - O(log N)
    Space Complexity - O(1)
*/

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int n = nums.length;

        // Base Case:
        if(n == 1) return nums[0];
        else if(nums[0] != nums[1]) return nums[0];
        else if(nums[n - 1] != nums[n - 2]) return nums[n-1];

        // 
        int low = 1, high = n - 2;

        while(low <= high) {
            int mid = (low + high) / 2;

            // If nums[mid] is the single element:
            if(nums[mid] != nums[mid-1] && nums[mid] != nums[mid+1]) return nums[mid];

            // check for left subpart
            if((mid % 2 == 1 && nums[mid] == nums[mid-1]) || (mid % 2 == 0 && nums[mid] == nums[mid+1])) 
                low = mid + 1; // eliminate left subpart

            // We are in the right subpart
            else high = mid - 1; // eliminate right subpart
        }
        // Dummy return statement
        return -1;
    }
}