QUESTION : https://leetcode.com/problems/median-of-two-sorted-arrays

/*
    BruteForce Approach
    - merge both array in sorted order and store it in new array, then find median.

    Time Complexity: O(n1+n2)
    Space Complexity: O(n1+n2)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> nums3 = new ArrayList<>();
        int n1 = nums1.length, n2 = nums2.length;
        // Apply the merge step
        int i = 0, j = 0, k = 0;
        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                nums3.add(nums1[i++]);
            } else {
                nums3.add(nums2[j++]);
            }
        }

        // Copy the left-out elements
        while (i < n1) nums3.add(nums1[i++]);
        while (j < n2) nums3.add(nums2[j++]);

        // Find median
        int n = n1 + n2;
        if(n % 2 == 0) return (nums3.get(n/2) + nums3.get(n/2-1)) / 2.0;
        return (double) nums3.get(n/2);
    }
}
*/

/*
    Better Approach:
    - reducing space complexity
    - instead of storing all the element store the element required inside a variable.
    - using ptr variable to reach to the median index of the merged array without merging it 
      instead of merging increase the ptr value.

    Time Complexity: O(n1+n2)
    Space Complexity: O(1)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Size of given arrays
        int n1 = nums1.length;
        int n2 = nums2.length;

        // total size
        int n = n1 + n2;
        // required index
        int ind2 = n / 2;
        int ind1 = ind2 - 1;
        int ptr = 0;
        int ind1el = -1, ind2el = -1;

        //
        int i = 0, j = 0;
        while(i < n1 && j < n2) {
            if(nums1[i] < nums2[j]) {
                if (ptr == ind1) ind1el = nums1[i];
                if (ptr == ind2) ind2el = nums1[i];
                ptr++;
                i++; 
            }
            else {
                if (ptr == ind1) ind1el = nums2[j];
                if (ptr == ind2) ind2el = nums2[j];
                ptr++;
                j++;
            }
        }

        //copy the left-out elements
        while (i < n1) {
            if (ptr == ind1) ind1el = nums1[i];
            if (ptr == ind2) ind2el = nums1[i];
            ptr++;
            i++;
        }
        while (j < n2) {
            if (ptr == ind1) ind1el = nums2[j];
            if (ptr == ind2) ind2el = nums2[j];
            ptr++;
            j++;
        }

        //Find the median:
        if (n % 2 == 1) return (double)ind2el;
        return (ind1el + ind2el) / 2.0;
    }
}
*/

/*
    Optimal Approach: Binary Search (better explaination : https://www.youtube.com/watch?v=F9c7LpRZWVQ)
    Time Complexity: O(log n1), where n1 will be the size of smaller array 
    Space Complexity: O(1)
 */

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;

        if(n1 > n2) return findMedianSortedArrays(nums2, nums1);

        int n = n1 + n2; // total length
        int left = (n + 1) / 2; // length of left half
        // apply binary search
        int low = 0, high = n1;
        while(low <= high) {
            // from 0th index to mid1 index of nums1 will be part of left half
            int mid1 = (low + high) / 2;
            /* as total element in left half can be 'left' number of element, 
            so remaining left - mid1 element of nums2 will also be in left half
            */
            int mid2 = left - mid1;
            /* 
            Now check if all the element in left half is smaller then elements in right half

                form mid1 to n1 index element will be in right half and
                form mid2 to n2 index element will be in right half
                mid1 - 1 will obviously be smaller then mid1 element and
                mid2 - 1 will obviously be smaller then mid2 element, as nums array is sorted
                so check,
                mid2 - 1(l2) > mid1(r1),
                    - elements of nums2 from left half is larger then elements of nums1 in right half
                    - move small element inside of left half and greater element inside of right half
                    - low will be mid1 + 1 (till mid1 all element is smaller and should be in left half)
                mid1 - 1(l1) > mid2(r2)
                    - elements of nums1 from left half is larger then elements of nums2 in right half
                    - move large element from left half to right half and smaller element from right half to left half
                    - hight will be mid1 - 1 (from mid1 - 1(l1) all element is larger and should be in right half)
            
            */
            /*  mid1 will me in right half and from 0th index to mid1 - 1 will be in left half,
                but if mid1 is 0 left half won't have any element then aassign minimum value to
                make above condition valid.
                (similarly for mid2)
            */
            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;

            /*  As mid1 will be on right half then mid1 should be less then n1, 
                if mid1 == n1 means all elements of nums1 are in left half. 
                Similarly, if mid2 == n1 means all element of nums2 are in left half and righthalf is empty 
                i.e we assign it as MAX value for above condition to be valid 
            */
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;

            if(l1 <= r2 && l2 <= r1) {
                if(n % 2 == 1) return Math.max(l1, l2);
                else return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.0;
            }
            else if(l1 > r2) high = mid1 - 1;
            else low = mid1 + 1;
        }
        // Dummy return
        return 0;
    }
}