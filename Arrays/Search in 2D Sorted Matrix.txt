QUESTION : https://leetcode.com/problems/search-a-2d-matrix/

/*
    BRUTE - 
    T(n) = O(n^2) // Tarversing through the matrix
    S(n) = O(1)

    BETTER - 
    T(n) = O(n) + O(log m)
    S(n) = O(1)

    for(i = 0 to n-1)
        if(matrix[i][0]<=target && target<= matrix[i][m-1])
            return binarysearch(matrix[i], target)

*/

/*
    OPTIMAL -

    T(n) = O(log(m*n))
    S(n) = O(1)

    1. Imagine the 2D array in 1D array
    2. Convert index to row and col 
        row = index / n
        col = index % n
    3. perform binary search

*/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        int low = 0;
        int high = (m * n) - 1;
        int mid, row, col;
        while(low <= high) {
            mid = (low + high) / 2;
            // convert index to row and col
            row = mid / n;
            col = mid % n;
            if(matrix[row][col] == target) {
                return true;
            }
            else if(matrix[row][col] < target)
                low = mid + 1;
            else
                high = mid - 1;
        }
        return false;
    }
}