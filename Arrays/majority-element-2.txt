QUESTION : https://leetcode.com/problems/majority-element-ii/

/* 
    BRUTE -
    T(n) = O(n*n)
    S(n) = O(1)

    for i = 0 to n
        cnt = 0
        for j = 0 to n
            if nums[j] == nums[i]
                cnt++
        if cnt > floor(n/3)
            list.add(nums[i])

    BETTER -
    T(n) = O(nlogn) + O(n)
    S(n) = O(n)

    using hashing
        if value > floor(n/3)
            list.add(nums[i])
*/

/* 
    OPTIMAL - [ Moorse Voting Algorithm ]
    T(n) = O(2n)
    S(n) = O(1)

    nums = 2, 2, 3, 4, 4, 3, 4, 4, 3, 3

    1. for floor(n/3) there can be maximum of two number > (n/3) for an array of size n
    2. we take two variable el1, el2, assume first two distinct element is the majority element
    3. we take el1 = 2, incresed count1 twice and then take el2 = 3, count2 once
    4. then as 4 != el1 or el2, we decrease count1 and count2, now count2 = 0
    5. as count2 = 0, el2 = next element != el1, so el2 = 4
    6. repeat
    
*/

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list=new ArrayList<Integer>();
        int el1 = 0, el2 = 0;
        int c1 = 0, c2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(c1 == 0 && el2 != nums[i]) {
                el1 = nums[i];
                c1 = 1;
            }
            else if(c2 == 0 && el1 != nums[i]) {
                el2 = nums[i];
                c2 = 1;
            }
            else if(el1 == nums[i]) 
                c1++;
            else if(el2 == nums[i])
                c2++;
            else {
                c1--;
                c2--;
            }
        }
        c1 = 0; c2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(el1 == nums[i])
                c1++;
            else if(el2 == nums[i])
                c2++;
        }
        if(c1>Math.floor(nums.length/3))
            list.add(el1);
        if(c2>Math.floor(nums.length/3))
            list.add(el2);
        return list;
    }
}