QUESTION: https://leetcode.com/problems/4sum/

/*
    BRUTE
    T(n) = O(n^4)
    S(n) = O(number of quadruplets),space is used only to return the result.

    Approach:
        Check all possible unique combination

    code:
        public List<List<Integer>> fourSum(int[] nums, int target) {
            List<List<Integer>> result = new ArrayList<>();
            int len = nums.length;
            Arrays.sort(nums); // output in the question is in sorted order
            for(int i = 0; i < len; i++) {
                if (i > 0 && nums[i] == nums[i - 1])
                    continue; // Skip duplicates for the first element
                for(int j = i+1; j < len; j++) {
                    if (j > i+1 && nums[j] == nums[j - 1])
                        continue; // Skip duplicates for the second element
                    for(int k = j+1; k < len; k++) {
                        if (k > j+1 && nums[k] == nums[k - 1])
                            continue; // Skip duplicates for the third element
                        for(int l = k+1; l < len; l++) {
                            if (l > k+1 && nums[l] == nums[l - 1])
                            continue; // Skip duplicates for the fourth element
                            long sum = (long)nums[i] + nums[j] + nums[k] + nums[l];
                            if(sum == target) {
                                result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                            }
                        }
                    }
                }
            }
            return result;
        }

*/

/*
    OPTIMAL - (HashSet)
    T(n) = O(n^3logm) , m<n
    S(n) = O(number of quadruplets)to return res + O(n)for hashset

    Approach:
        Remove the 4th loop for l and search it the hashset:
            if target - (i+j+k) while is equal to l is available or not
            if not available add k to hashset
            (bassically we will add elements between j and k to hashset)
            and if target found we will return [i, j, val(between of j and k), k]
    Code:
        public List<List<Integer>> fourSum(int[] nums, int target) {
            HashSet<Integer> set = new HashSet<Integer>(); 
            List<List<Integer>> result = new ArrayList<>();
            int len = nums.length;
            Arrays.sort(nums); // output in the question is in sorted order
            for(int i = 0; i < len; i++) {
                if (i > 0 && nums[i] == nums[i - 1])
                    continue; // Skip duplicates for the first element
                for(int j = i+1; j < len; j++) {
                    if (j > i+1 && nums[j] == nums[j - 1])
                        continue; // Skip duplicates for the second element
                    for(int k = j+1; k < len; k++) {
                        if (k > j+2 && nums[k] == nums[k - 1])
                            continue; // Skip duplicates for the third element
                        int val = target - (nums[i] + nums[j] + nums[k]);
                        if(set.contains(val)) {
                            result.add(Arrays.asList(nums[i], nums[j], val, nums[k]));
                        }
                        else{
                            set.add(nums[k]);
                        }
                    }
                    // Clearing the HashSet using clear() method 
                    set.clear(); 
                }
            }
            return result;
        }    

*/

/*
    OPTIMAL- (Two Pointer(k and l))
    T(n) = O(n^3)
    S(n) = O(number of quadruplets),space is used only to return the result. 
    (no extraspace like hashset)

    Two Pointer, using two nested loops for i and j and using k and l 
    as pointer from j+1 to length and checking all unique combination.
                                                                                                                                            
    In worst case the nested list(result) can take space upto O(n^2).
    This occurs when, for example, all combinations of indices (i, j, k, l) 
    form unique quadruplets. 
*/

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        int size = nums.length;
        // sort the array
        Arrays.sort(nums); // test-array: -2, -1, 0, 0, 1, 2
        for(int i = 0; i < size; i++) {
            if(i > 0 && nums[i-1] == nums[i]) // i++, if next value == previous value 
                continue; 
            for(int j = i+1; j < size; j++) {
                if(j > i+1 && nums[j-1] == nums[j]) // i++, if next value == previous value
                    continue;
                int k = j+1;
                int l = size-1;
                while(k < l) {
                    long sum = (long)nums[i] + nums[j] + nums[k] + nums[l];
                    if(sum == target) {
                        result.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        k++;
                        l--;
                        // k++ and l--, while next value == previous value
                        while(k < l && nums[k-1] == nums[k]) k++; 
                        while(k < l && nums[l+1] == nums[l]) l--;
                    }
                    else if(sum < target) {
                        k++;
                        // k++, if next value == previous value
                        while(k < l && nums[k-1] == nums[k]) k++;
                    }
                    else {
                        l--;
                        // l--, if next value == previous value
                        while(k < l && nums[l+1] == nums[l]) l--;
                    }
                }
            }
        }
        return result;
    }
}
