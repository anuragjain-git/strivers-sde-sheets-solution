QUESTION : https://leetcode.com/problems/powx-n/

/* 
    BRUTE -
    T(n) = O(n)
    S(n) = O(1)

    for i = 0 to n-1
        x*=x;
*/

/* 
    OPTIMAL -
    T(n) = O(log n)
    S(n) = O(1)

    If power is odd :
        2^7, we are storing 2 in ans and evaluating 2^(7-1) = 2^6
    If power is even :
        2^6, we are changing x to 2 * 2 (i.e: x*x), and evaluating 2^(6/2) = 2^3

    Example 1:

    2^10 = (2 * 2)^5     =  ans = 0, x = 4
    4^5  = 4 * (4)^4     =  ans = 4, x = 4
    4^4  = (4 * 4)^2     =  ans = 4, x = 16 
    16^2 = (16 * 16)^1   =  ans = 4, x = 256
    256^1 = 256 * (1)^0  =  ans = 1024, n = 0

    Example 2:

    3^3 = 3*(3)^2 , ans = 3, x= 3
    3^2 = (3*3)^1 , ans = 3, x= 9
    3^1 = 3*(3)^0 , ans = 27, n = 0
*/

class Solution {
    public double myPow(double x, int n) {
        double ans = 1;
        boolean negativePower = false;
        if(n < 0)
            negativePower = true;
        while(n != 0) {
            if(n % 2 == 0) {
                x = x * x;
                n = n / 2;
            }
            // we will take two condition (power is either -ve or +ve)
            if(n % 2 == 1 || n % 2 == -1){
                ans = ans * x;
                n = (n>0)?n - 1: n + 1;
            }
        }
        if(negativePower)
            return (1/ans); 
        return ans;
    }
}
