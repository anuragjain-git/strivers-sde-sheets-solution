QUESTION : https://www.codingninjas.com/studio/problems/count-inversions_615

/*

OPTIMAL APPROACH USING MERGE SORT

*/

import java.util.* ;
import java.io.*; 
class Solution
{
    
    static long merge(long arr[], int left, int mid, int right) {
        
        int count = 0;
	    // Find sizes of two subarrays to be merged
	    int n1 = mid - left + 1; // Size of the left subarray (n1)
	    int n2 = right - mid;    // Size of the right subarray (n2)

	    // Create temp arrays
	    long L[] = new long[n1];
        long R[] = new long[n2];


	    // Copy data to temp arrays
	    for (int i = 0; i < n1; i++)
	        L[i] = arr[left + i];
	    for (int j = 0; j < n2; j++)
	        R[j] = arr[mid + 1 + j]; 

	    // Merge the temp arrays

	    // Initial indexes of first and second subarrays
	    int i = 0, j = 0;

	    // Initial index of the merged subarray (arr)
	    int k = left;

	    // Merge elements from L[] and R[] back into arr[]
	    while (i < n1 && j < n2) {
	        if (L[i] <= R[j]) {
	            arr[k] = L[i]; // Copy an element from L[] to arr[]
	            i++; // Move to the next element in L[]
	        } else {
	            arr[k] = R[j]; // Copy an element from R[] to arr[]
	            count+=Long.valueOf(n1-i);
	            j++; // Move to the next element in R[]
	        }
	        k++; // Move to the next position in arr[]
	    }

	    // Copy remaining elements of L[] if any
	    while (i < n1) {
	        arr[k] = L[i];
	        i++;
	        k++;
	    }

	    // Copy remaining elements of R[] if any
	    while (j < n2) {
	        arr[k] = R[j];
	        j++;
	        k++;
	    }
	    return count;
	}

	// Function that sorts arr[]
	static long sort(long arr[], int left, int right) {
		long count = 0;
		if (left < right) {
			// Find the middle point
			int mid = (left+right) / 2;

			// Sort first and second halves
			count+=sort(arr, left, mid);
			count+=sort(arr, mid + 1, right);

			// Merge the sorted halves
			count+=merge(arr, left, mid, right);
		}
		return count;
	}
    
    
    
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    public static long getInversions(long arr[], int n)
    {
        return sort(arr, 0, (int) (n-1));
    }
}